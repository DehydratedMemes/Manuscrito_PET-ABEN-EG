%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.0.1 (Build 21A559) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 850 500
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 850 500
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: COAOQD+SFProRounded-Regular
%!FontType1-1.0: COAOQD+SFProRounded-Regular 1.0%%CreationDate: 4/1/22% Copyright 2022 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.0) readonly def/FullName (SFRounded Regular) readonly def/FamilyName (SFRounded) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -310 def/UnderlineThickness 120 defend readonly def/FontName /COAOQD+SFProRounded-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0005 0 0 0.0005 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /zero putdup 34 /two putdup 35 /four putdup 36 /six putdup 37 /eight putdup 38 /one putdup 39 /R putdup 40 /e putdup 41 /a putdup 42 /c putdup 43 /t putdup 44 /i putdup 45 /o putdup 46 /n putdup 47 /space putdup 48 /r putdup 49 /d putdup 50 /parenleft putdup 51 /xigreek putdup 52 /parenright putdup 53 /hyphen putdup 54 /three putdup 55 /five putdup 56 /E putdup 57 /g putdup 58 /y putdup 59 /k putdup 60 /l putdup 61 /slash putdup 62 /m putreadonly def/FontBBox {-832 -1205 5474 2650} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECFB251A6917F67862A742E435770A4AED3FA70C2DEB5E95F53D84DB211E3CC9F025EE02C14E2445AF495ADAF6A4AE081678112EFB41237B757190C67AB6134EF209B1BC890CB2E167E5B856A64D953F216E752C47B6D7A110C979613045EB09A47BDE31926F609710C9F6543BCFDFE15151848B00D406DA4E4FD42B2975EB1392BD3488BF8A19C38AE3883728C69B957BB74055DB0DC235F33E1B9FDDB6DE18F87ADAD53ADE1ECA43C8C7BDDA5F5D9B5F542A1245E57C1F3E504DFE1023FE9F8EF86A7B6F47D3091530E80D96FBA6AA23513CD746523D754B814117EBE7A261BC41089DE2F489E77DEAA668C9B36FF4F2854068A3C29D54F9FC1E1044DEE7807262533749D8A34CB021D5918B219EEFF2DB685D6E73F3265976500CE94657F735018C0EC30455374AE03A3F51DCB14141DFB6E80CEF57CF26F36AA96C9E37340E5A33A7CB0F3459BEE9A587A4B60FA8598A9B0E02DD24597195B0B6FEDB75C00E3097C129390CF790C372D0CE2E7732B8B325B960FB9BC8869D0F0B37B3D41DD91B6665B46170F9BADE39A45BEF1D41301B1079F9797EEAEF0E813826A5643BA1EFAF8411EA3C6A93FE489D6909B77B4A9D26FCC34B6025C39023D76327CCB3848D5601E3BE4BFDD3B598FC0A9444F697429948B8EFC3F96A20DCFBC68EFA3B8D45F85CB9CA9C006450162B3F38FC66D3F169F8BB393217C413D35C013C85156F37630ECA4928FC6EB53BA555D57A599F030234D3DA5FFCD1E12F46A3F4C0C6E4C6F980F2E3262CE73F673134FB195F57FD2D0102D069CACBE6A5D6A7FA222BFBF4C3FB27CAE77F3A13FD0A52802D43E074D257CBD036AF846260CCF6A45CC75B8ED66FCBF8E0FC1FD73CE73C969F4B0A7990077DEBFB45AA9405628972D116A5AC705B8DBE9212BAFE6DEBB8F91DCD53789CC04D58D635D4912055DA98727844F3DF1F0F42AFE48C178CF4091D2743C62D75B680258019A988F95E43BEFA0337B9F16027F325605E40696EB1EEA54EE40CEB6E5B56D611B7428BFAA941A9DEC936CC8DE7CB58DA0C291A4C1E81942754E66CF385D5958C352891ABEB1DD3D9E8A4F5B8FA4A52A800DB61BF52482CEB23ACDC5E18F23223823FB73AC46EB3D0F5CBB591E6B18AAD8B9874E0D1FFD36BA2C19498C364134A202F6120AA5BF38909FC403A7FDEBC7BEDF057CFB83E5913C4322D1494DD890FED3A0D4B443BD25412511D35F02852942607BB503A0286F71588BC62AD187AF965713F3F4B6AD7823130AF3372B5F73E00AE2907AF3A6F3DDF968E8D51B3DB3F146272C6696DA3F210989BD0F664D769E4E40ED3021294B4BAFEDD558C9702CDBC907AB75F7927821AFFE5981852C2C7CD4E1BBC211DCAF74C49AA35F1DEBE18DC4FF3663DA5064D1D0525E88500C5BD9EA19F1A9816E79A5471B4C8ADCA5537A57850E0166FD54CFFAB13AB07B6449916527F0C18B29FDE7B500F0181117C77C716102E82DCDA92DAA3480C915B204C1B32D59560BB173DBAE40DCF038D1137B5AFD67B12660D7B4E14C646C7BE07DF1866FF3F7174E1025D05FCCDEA1DC67FB0E12BE9520C6F66FA913A77E0F2609F57F8875CB33209D1AC0B628E306CAF48D350600D09097516957ED1C1C274357440C3226A38EF3BC146BB7817A72D2D3BAA645017E03B54C21C2E8D97D50E73CE569F764D436D3AD74C804F1EC22F3D28A98EAC3E2C8BB65CBB13612F586843F79CEADE7729D828D14BDC356C79D84A4E503C65B457A441ACC0FBB37E1725952C56F848DA30FEF05A614C4E8F835DC090E57B5CC0314411798B0CE8A8DD02589DEEAC613AE3F3DE517CB5E4EB3E75BC4558DFC423D1C64C44F456031761BE58D01677B8DE0821D42063F7E5B513A3A669D9F8F2DDAD339874478972DBD2B23E4159443C293F5E32C346620D3373808D67FDA8EE5C714EA9B2EBB96C25B3E2C9A170D269B1B14F45DE9B02C9AAC6E6B5B77E153AE757048624E9F541BC160EE9286E45333EAAA15A3370886EEB2FAA2617C16720DDD2BC9F03B566609E6749E4F20CDB4A1720BA6201901677C5BE180D9D6604BC866A1847F3780320F71444BC557CF6673EF84A3D4E295A28742F201C1217B9636F006AF8ED62219929B4186AFF5AB5A871F588CE00C77E2D0588F73FDE17D46B51F40DCF387A609E1427CFC5502EFB8BC41E3BB5C91269948B53FEE43BEBBFA91712885A6E63756848C40B10E082F21FAC746B3EEC375CF36E8A546922319B950A4F892A5864C6250ECD529D3DEF3CB338C94D3898762E84DEE3C06D69A46AC19AAFA98E0B3C3E83A7CB989E2F79438CACB929307267A6299CF1A53BE9EABA51B287F2C2C6E17E7D492CFB70B115C4BC72F067ED220C7B579C874CA35038EAD5629773F73058EE90B27409C1C5920264D4D804C8A9145B9DA2C0D3E00D1CF01F15884DDA2D4B00DD409984AA09E9E49F653473819D96CAEC38CA46416A5120779D2D2C8899A766E4E79A9852A668B2F9280311F006AF473D73A6985DB73648D9B8DFAC2E1EEB5DCAC5DE491213C4EF897A497B10480FC42DF4BB724EF42AD772D10D9739C856EF77DC32BEDB12687B88EC4FB3E71F46A581032CE18456F352E6D27A6CC9B0F3FCA08C2549015D1BB4C4423F56F3F6B0D4A70A3EB9CAC0E89EFB3F64399306F5468E95D3753184568F23F592A39FFFE237BD9962D9080CFAA33125222A34F93849485DB0DBB75D4093E4E55F96002130D7EADDEE6979A441DC992DE63B74C7AD2A5B5621DFC16CDB2ABB17AA9CC418E24FFBB8BE75C3DCB2CCEB0CE7F01C03C589BF1F44831C4BB67DEB1A3581CF99ECCACA6188827095A54D72702F63426F806079AABB32F68C2BC3A3AFC7EC7F2414D939D97E8A3B96D786350D4A53375E1FC6DC072C7E2D97B453D94E3B32C05281217671D8A1316CF696D5B7801E79E59C5B1F91065485938AE8401FF120DF904FF61E8184A2310E78D0D9F36993EEFB62941617D0D5BD7FF87A15BF79F3020415924ED38798CC0259C68F9AAFFCFBD0341B08F681E2E00AA725CE1518B61C7CA549660C18B097B28EEACB43D0F8A41B8ADAD7E3CC5D7545CE5D9AA1D5118C51B1321DB0DA4305257F988D69E775F6B7E1F410EA3671340BAB8EAF0625E68E35F9824027947152694C9A53C582C2B98DD2A128FAB11E4454BE362DF73851F59A54336913284C0B432C9C4FD9C5FAA71E08EAAB92371CCF6FFC5A92C9BA57928B7CBA8BA7FC5E2F7FAC92EE3F0B146D7D1B92FAE3B71DAD2D7244BCD6B189978568A71AF83BD6EEE166658E224D9B467F93A06270BFF3B530952B53B394A58CE929DCEEFFDF3368C1517B2C871DC67AA81D0C1DF3064CEE3FA74A63E65E75EE42A75F715DC35E892A31AB8EA8E85400AEBA4195A9683B54B68D281F4ED1152620527BB157DF471376EB0F3C7DECF7CCF48604F9C87D558A9530E14186945E0072217011906890011B8123173DA367001D7F1233F2BE1A5A3D088CF2692DA9B713421E1C3FEAFEDB56559F5B2C3084FD7705C4BD591D8024177E385B6C5E5C7FB7E4E50A8178160E1C56E72495CF80F63E06B8DDDF19CE9E7ABB20A9F29846AFE09A5F9E9816E35C24772EECC82013417955CFA209BCC44BD2C2885D2B8D8EA642291079B390D22FB9C1515A863472BE94A51AA0B7E3DED482D66EBB5E9C88F3B00C15A512F4421C7DC0820B144A8785BE0AE290940504E33802F454613CB6A653B1796F048776B7BB84508FB9B27548CC1860D400D33E3D5F152CB3547B9ED7C8F4ACFD86832D121C530D69C1C673C2744222D6CD4AC73FF6EA3718FD1691392677748954077089FAAEB9CE9B4ECC613C5ED429F8076A5B5D48E3D63B299E668B6CF33B46A507B20E5B23521A243CBBCCE76BD0C7BEFD8F2ED3D9B98746B0AA79B6F9D8BA75123F7D2087971EAFABC8CB0F0D0C9A5E54509A377634C57E52F3C8BB717FD1C5DA221B4BA905B59AFFE25089F4472DEE1AACB7F4328B9897A5625993F38125A3037482AA3FAC89EE6C8002869A7DCA64965B3F6230769E36890EBCA0468C7DA4DC7483315687A2D466923C10566F8A9A64997D093CC3428665FBDD4A1D03C734CE8AA26282124A21BCFED143A8ACD611552790E0F982ADBEF06DD2A4E43ADC9145C5E090785268206F3448C93D60627D0BA6E8384AA3B46737A8653F14FC97E4365DABF36CDB659503CB03B8076196156AABB7AD1AC1908F1A8362E452568101AE82836D8F39A6F08C5E3D405C9101DC4254AAC63D3461DA80C98286360EA304DA393506FC4FAA16C74BD2B9A95EA071840538346B5C6AE14363F0F9494105E3E38C1F1CAACE2EC3774F672D45F4BD8F1B69B17FF4F14D07687FF716A693A0F99299E974ACED817A609C5D2CB92AF7A1BEC7AF80E5ADD12889F83A86A2D1AD02E22886F86A9E2E67CDC0A7DEE51E8D0D7FD60F1B5137F96376F158BB850E2492BE979881720A721802714850BB0D5DF5DB2B38E6057B93AB26DF96455C270A498121A8628051D84859A8C39480BE4DC2F8DBCA472866D7C96E87E2C0E494B55983C6BA954EA1DC9DCF1B746C8A63B6EF53EDC93B66B10568C1EDD7335B236690957789B371241AB9AE2CA78AE995BA1CA40C3E8C8EA3CBF99316BF0B858CFC77D8C2A9E5B19699A541FB8C5CF9B5E693666585776688D6EF3DDEB50BB11F7D40949B9C6A8EDC0D5E3EBD82027A8F85E3E44FFF8672E69D12CFC6B9AD56C3F97F497FC5EDB58FF9FF590BEB73538D72303F48613BCEEF8D1E3ACC67CD70B0906ED03DCEDEC38ABE36D7A13ED7C2E3758DA44DEF87A27BFBD49F9CA833503B5517A05707936C9F24C95E78EB6665B5573069E2699CF234AF584ED4C1E5EC297BE08278173E2DE1D187F211C05336DBC249D673DD3030C090DB23FB320F7241667D90A68789EB1746AD3DC0B94B605A4619BAD95E7728527A168DDBB731C816A4594B608597E483FCC12E1553B331B65D3868301C9620830A473FD238A0E9FED6575D7A21A7C384408BC07329FBC15F01F09F38771F09BC9631C67FBFD753BBE109158FF446D2D4CA07ADB5C26BD5F1DB741C586077AECE0A6141B1C12017EDF75FA8CBA7A389CB7AAADFE299B56B0000AAFCDDA41EFFE6A89F77BA87FC55EB8D40037AE619336144C328C662DABC3E50DB5D2A5263E7686DDC898C93E032545CD17DBFF6AE8CC71CD148A47F16ED1014B28AFE2DCD34FEFFD0502661578963D91DD71E643DCA0AEF0FB1D7CBA68C3FA02FB0CB32D68BD4556D5E253D5AA366E6A80E45DBE7FFBEE486DAAE66969DD28F9ADA8C6636970A0DD8092357D89BF48B52AD00D54740CEAB01AFF1290C90EDFEB04C0F168FCE64EC5E356806A9C69A2A9A24C765297E8493F9CC51C3AA25AD9B5B81F066D141B1DF3B72BCD49756F0BFC2A3628391F81C946795379FCDD1059A5C712A3354BC9AD9D1D1D26E12C6364ECFD4891DC8AE8BFE133E18DEBD0B0547DC1BDD81DB81C0ABA3F055629D910A7D81382FC94992172804341E1C80C9289B0E163934E801CCD9A23B47930A57CAE509C9E021D184498AD90B588531C18EEC78AA526F3442930E3C78A7A1451E155981A4D2E280E14E734612D2AD8E07551DFC9552B09C4F998FC2E90767142CCD7DEF4514C33A13EF3EF20E087B4C0616A5421533750E520296B9B1826A551A19A080B017C2C6A1A8F8B58CB0E27F1F52E6A3AE543A6E62A487832D2863199B1566812F376919F25506D08186EF35AE9E6D7172A687E2EC8F352F229A0E0F793A1377664019D4A8E2734AB86323950090788F5B5DC8BDEB34FF5ECBF43DC489631600BC54DD2D14F8F3F72BB690E3DEC2634A43C1509719B5003DAE7697F49BE40B2C9F0C49444A42BA035B38F30EBD21F9971F6FE5F7064AF384D6E153DBF81B4E127A2F423043B898EE79CD6F75C16A96CDFD3ABFCE536221C2C2277C369D488C192A196E6B90A175BD6383E63348C2B657E82A87466E2AB9C29A82ABA1E3B2C6613293B6D4F82ED2C2327C53D9CAE92C61B1029925FA1896DE9C0400977B229B2CEDA7310873EB86C9F05720D0D0641B04587D4E9CD1AA6A17E12CAD2B62D18D9F3406964625143DD4BBF1E3F5A7839BB051F32FD0DAD53530B0C1845909DCF4E77892E35E76AECCB4F8E221A43EDCF99F8F44FE635D83FB5DF18BA7D5AD6468F60520BD81CD9A45D5A672414DCCDDBD9AF7233D7CD09057C7589223976EB5EDB9A713179785D24BB0D50365E55604DBB9AD0AF22EDB94AA37EB29158E493E5F38329B5EE1AEE3F0E58D3736CA26D358CD5251BD5B088DFD37A8162DB664C58016819CFC4631F19A1690381AB37EBEE7BB08DE18BC728D2E75C68A6DE4952A1CF5D1469A7AA11F663CF3C64E66234B8F6E895B1620443F4A35E06115EB4CB45D32FFF99D75499C7992AA42BAE31763DA805800AC8ABC217D557A5DF88F7484C4B14B6A4D264E1E26B28A029FC947999DE0CE564D64932ED8FF82C17D34A546F981034C99B562C62017CEBB1314ACD757E31A94734CB3B49FBB727677555585A171525E5FA6145B26096378A5CA4A50264961EC90FE76FCDFB91B68C47E14E03AA1F0436B299E56266A0D43B914A7A2D3A63D63FE22BE62098C9FC1E98AFD738D286EFAB01C1855B3208695924D8C891CAD02C9A5DF24284155CABF9267F5E4F4E87DAEEE3AA3FE0E77EB9B6FD90FD850443A7E39BFE23D777B9F40C592CF9E56EAA20627DF929A747ED5FC7D728D5D5682CA2AFEE24B1D142E9F90F40CEB9B4EE5CC714B8986689111E8FF46713E0D598E285B27D266C5EC49DFA5C2079D33B410568AC4CB03C80D98C434AD8D4BFAF149916E1576C36C2C58CEFCBA467AB97466B8C6B55DB032E061EDE089398517C0731653258B10956521FAD35ECA4EBAC49C6F9DDFA11804112160800ED788FA95653D57FD8277752CFF42DAC0C7F2E8DF58C19D0DD8584ECE6019217799C78F203DAF6F70A0830432483E763250EF2088BDEC564520432A673612114311F38E4ACA4151234E2F60E1C38B96BC3B2875E639101D6A43A1690A12A295438C9CFF5C68479848823FF0012F6CC0C46F30A00FE79DCDC9996762EFF8417B8AFCFD6F79DD9F40AE37321540404D027B058AF161AE0F36C1315F491F84B4CB7E7412BA0500F9779EF93B128A7733139DF810CA7DB9AA53722A09865183B46986FA90D2F3DEEDE0242C8A9A569B14247EA0F3EDA079C65CE8A22334B1925486210ADC3A43B5656E69E5A41FBB463E6EDF3B04EE3DD37DCCE2BCB1F95CF1BC8D03691102A62971CDF08F4193F68272A142B0E9FB82F6C2DB825A90953125D5883B720752EEA356D335A85B88B4B19E69E06E2F232EFE16289237285D730BF928D28A0DEF934DA24B11F3800E14A80FA639ABD6AB48953A25C207DBA684319829CC1DE3D06B66E201EC521D2FD63D39C851A20D202C41E78FBFDF382A09E79E032933838AD6EE6B22E064637C9BEA7CEA05C00E3B7233C9282F032E36C88E5608F58F73F8546B2FCF3767C2D50A8A44BD8E3B3AB8E0FBB7B6779DDD11210E828CC19CCF17C4E7302C87F34ACBC1D37989A229B8097195D7EFEE37282A7B9890A17E1B9A4169FEC5C4FBCD43F34A16348162FF034EC413015B3B98D9407D5A7CA9A0939AA92FBD262537AFA4F6C76CBF4B83B9970397C74A8E7B8A3383BE8843B897AAAEE775E883F62958E6B64C4B2AFF455FFC389C44B30BF4C1826F1B2CB2F16C817242C7A6E8B15A60DC91506A36F7CBBCFBF7BC413C43DCA9BC8D9C283C5B7ECF82DD3D9216FE85E365F849E1457BCD5ADE6B56851C7487080FE571DAA9C795D0E0AF2C9A2BC0BD4454F5B8F044921E7DFFA2D6C521E546B3FFDAE26A181230E5DF430CF9895C403A2D5DE88CDE1BBFF9FD17B34CA5A52F8F7FC48CFD30BA74A204EA52E1828172D45729257027A3785089FB1AE81ACEA18F70E8517ABE15A49FDB310033434A390B2E4EFC611B820D7A4BD96BC1C4166E42246934DD00456F99B631A59B8CE9B54130477D42A93A475EBD412B92469D4BC8FF30DFE2BFFD790390E005D299C07882F4F8515AB3BABDCD98A63B0F62A0C4F0CE00DDB5844CD27973D7588606F7AB41B429CBF347632CF93A23E68BE8DC4178613647A93FAEC756B05314CD9D98954F87A3AF22ED87D259777052B169D93B04051DDCDECFE44927A498B1ECDA03499A3F05EF2DCE860BAA239EB20E66D097B8B624F392820331FB0D69E533BC060B2A22AFCE067774950B6621491351E74B1DFF1C112BEACF21E661AD752A001F8DA28173379E69378BF71C0E8A1C0A8E150DC0D9D689006D0261DADE6083DC71E6AF2BC107CD661821D485DE7279401673A88BA08BD18FB7D2737C4D085B2DC89836A0AA73CC3D86A155D4E7E0C1C84DD276FF941D28861CBDD6CBB65EF10E62718CAAEE702F69AAEDC4E2976225AD73A2DB6CE3FCB50A6E583E7CEB8B9A2470F7C530B133C7430364163AEC6E1130112B818B8F21DBD19748F4AAB9E03C211E9830C0D0B23D01DC95168B387D034A33975826EA7FF63C829951BB4DDF39FF43F170DF9C007E81BA76147122D880DCD40BEFB566EAE0DB4F992DBB5459AF575EF3340E717776F8C21BA46E833E6C8DE91A32B589B58AEC69A14ECF8F27A9D0A2E4F7925912308DB4E8E046A7A133E34B371F45D873C9991C064908D77D87F089AFD3D4C2552E4F8CA53A5757E07BDC112DC6DE163A67EE912BE2BF91F312F435BE8BF332C5FB1E4B7B871C963A83240D37D928DB5C7C4F453A88A2E0BFE5B7D903B2020A2AFB026A0CD633D832C7D8ED04B4A631158834113CE05C6580EFD871B21EF9188CB862426A0ECF21B5F476818E9ABD40DA867DD4A20EA947AF24A0F2DF5EAA03B1593F59C3F9EAAF8632E33985E0412CF17B39111B33FF185A961D1BD58E657F39E346B9977ABEC5E38F9EE96AC1A125C3C116B982E9A6DB1BB4D64D130852FAAF5B91148CA35D684CF58ECF6AFB81FC81271D67D37F4449D8D777D9EDA858DED27E6812D14E2522344DDB92707D3E47C29F3CC0FD2749372883A2E2A0885B7F43F753D31D274B774F0B65090051F96C568670D5D9CF719E73A5EA87833EDBC69519A0556EA1493CB5630C815A9E0A7028D89693BF646857672EF9A65DEAE87ADDB73111F00778A55DCDC8E09842F931FABB21E8312ADD3571627C1489B684DCA30F8CCE478CD735C5FEFAC6CD06F8AE5C77C9D4CBB4E72A09A2FE6A4C8E665470ADBFED8C921E76B73E79D5AE77B9BA718C8235884107E640BA1C10AD73814E0E06F940D605D0C7765ACE2CA1E3AB023A5B243B4B93835BBAC16E2AEEE8638F0BF1486DE5E86299253717123E9F89F5E2CA9F14DAA6013C47B7E4AAC575C1E037BF685D00F5FEEE1EF743C430C03193691A69050B0B269797B1CD8D876B70BF479125354C08CCBA192D5D4B3BEAF95A5C95624723F4B3D3F7B99F9BB2A55A47877C612DB23274DEDD160AF5D4C064D8EA9854F094886BC498041D95C9CB47BD865C72BAE9B1B6A55D629730451D1F135280584661412E3ADCF8B422C6E8939AD01FF711F9700AC9B358224B89401509810A37207F0C8AEF25ACCEDCE5927F77E9E41A6B6D260757EC033B0FA2C600EA88F75BA25F02E179D8D7963D180EF18D90A84AF1E1FE47B76E612B2AA9325CCA62B7E577BE31CE926D7A2FB76C14D5129B57F30EDDA4798F0B972CA53047F3A7A6F3884E25B49FC5611E29B41C480B3F528B0B1A4F9F12CB00CBA4A717EA5CA4F4C10D6E1E4FA9C0D53024FA4BA1C046449CB6FE0A8617126FC1DCC51339A0DCB8383DB9C6F7F95CFC2D2EF9899E5A7A167B6935E21AC2CD90B26C72389C34546C993493E3B858FAA31D73616CC5DFC344E4325DDAD8521BDACE3324B0B0AA5266367BB4860E6FC31462CE7D992499E2DC1992CA5BFBFD01802391AED0B103583B7D328158D404D575146151F71C3E01CB5498216901035FC861C54FE11288153F9118D0B56762DF47E77F0CD0FFBC3CEC0E86836171D78F2D572AE49002D43E0B7CFD15BACE9FA1F7200390C9DC59152B1E66D666ACCCC534E70D1E3383E8F975538EE45DF8ADEEB6914EA4B38A83EFF536E79C274D9C93C6C40CB134B55CE141B1A28667804FFD9F2E6ACAC1083A76A2CC4B8C144FCAF49A0C87483FF6D4EA84EE26809C5C6FCF068DFE15A96A7F60E80138177F7BAA9F7BED55A020BC3B1F909C222A620BFEF2716E8C95F8051AC62584F33C5CC09A9E2DD60642D26A85698B6396F268D8B75CE0A9841FE14214371C4541B664DEA09FF85BF9F60A522E4548D7D6177F0181B9EE2950D4AD93D0ADED3AB0EAD3199F6850A37B4AE900110EDBF4E611F4F43B02541666674078F50CD8EFB83892F1469604E9828CF19FF2588D751C08D30E0C8EBAC9F60C72361BC661755456A7ED6105A4F1EFC2DDD39199B499440209BB8AD0C0D3AAA5BFBDEBEE754D3082C773A7DCF562BC73FE7B833A30172097C60F617A20C7A17DD86D779B654150041DB7217AB4D4BB144F7545EBE0DCCAD3EE2C390C753097105F46224CCA1877B10503978D85AD5C5C99A9A3C4C4C0D07B6A2ECF8F2AB3213CEAD7790E2EDD6368D8DF01AE09FD4E3BE6B5E2FDDDD4C03D4404B7C292E3C843970CE37CC791BB1958595E0875E77A06A2EC0B71130DB5C2D872A94B9437A800D372505897022C80F11C3F8466C87559B621D2D5AF0C9FFEDA40FEC4DD53F84FA583DBD23196F775645E78BC8ED94F3CE5B5848D2B1E2DD6FC547AFFFB5E12562C78B579B385CFFFADCD87B7E1E644FE9FB4E14B8A06F4C66667E5E9AE6E990E55C69C8897DA4A25AB62D98AD88ECD3645526B15FF282DB4AC3BBB84E1B2176642DCCC88E7A02F19A370CA66A2D93B812EFA6C85F43FE9C2A5836B2286B736F6236B00F44D522AAAC4FCE1F6D19535F3A4EF494E535D2C5B43C06B19887EB5245647FD2D4063E95F53FF9B16B81D4DEB6A6A5DB6F6E83225F4A54E2698D8A38B02CA522BEDA87746E8054C7CFA41E6B094442C6F81848B2E1C6225029E353A206460744021371504A19EC5F3FECEA0DA76E11C395A7E2C226EAB02FEAC82ABB171D43CFA7FD42537BAA87E0BBEF81A76DC608C426DB85824F62E00C45130E04706EDCB96E35B004E69811D5EC389175F77D551F93CBB323029C1D3469D150BDE1C2E49C28B4C996CB266B2B5F137379A913683E30894C1BFEA6C10F0AF636ABE698DD33B16E3A5AA67362F40FBB3D359FC96799B247390B5869EC7B37321A0E4847E6B626695862840A8C617E1FE0CDC22B16E84D61B945D73C8B4F15A93710A6BF504A498ED04106FE0AE7ACF4CF23928237D8C3A160A2F83C6C9766EFAE6F5C1FD9CCAC5A17694F1AF89E18DDBDC553AA6933F502E0F5A883230C76EDB6EF04DFA06BA2CFE9243883BE05E4F88AFCDC37F7CAEA3A8D970CD54C3D2E9AFF63B0CAB8762A88B72DAEAF274AD474C81048F2E253F1653F22B31C19FDB3C852832E0B021A3AAA918778BC2641201CFD23B788E1F247EED5DBFD457A020BD38364EA2876FB871BC7E12C73653FA57850F16B611C8AAC885124A85A9C6F9FD681824B4591E7E48FA00D0CB4797EF9CB7A237A3B1EB22434BF92D3CC8CC62932C5652AE4EA5F2CDF032CC47C2FECB6D6FDECC00CABA226C6460EA7480B95FBFB176CCE1E74675828E0E57D4DDDEE684B6656A3F6971F1810C88C9BF1778C7103D3AB9801A67316C147E4148F43FE8013F37F39C8E40754C681AEEC6258F4B89950C2934A4AA24C3A72DD6E282377C3FA2A14022EFEB49512F2CBBDBBEBD9E18A90D1EE3BEC3484849ADB395E296F96698C577DA6F48D755CCFC4C2BFD963BDBFF5B513775EF5245111EE91BAE3E08295F26B568BF5E3B3E0BE30343EF63D52F9455DCE4DDBE765E5032489B872A5B06370CBEA346A031EE1E976EC68CB7E2E153795F487FF88646605E62593E311E12874A2D8CCDB3AC0645966F1B9B9ED4BB1C4365CF35D7C27DF0951830AEF4EA947C1FE1C8FB8B76E68D56346C7E6A304A116401BE99632AA1A124C9825D34626A2ED7E94D3833CF6B7A7B6EAE1F7C34D796FA5A2DAEE142AC6188F0CCF1E75F86512CCA57F5064077AAAE9303B844EA60F4677567E0CCE067538D6797AE3AED64A6492AEF1B6FCCD97E969EDD253AD5AE57EC35CA7E638192C11A16F89D183791D54DAE3464721B4D5B897DDCC3153A57FF3839B7407E415893088A1A6911E3C91AB3524961D4ED10D76DE8A1DDDC7B7D179B23A53BDCAC6FF5AA020BF59A3D9B59FBDE99C584551D4E1421E61D2EF4B81C263A789EEE28F23820330092BB535D6C77F37EEAF0E84752DCC57985A9FEC6CA4601095501B5F4E4591438894018072989E9EA7C659BAD8AEE1C0B6EB0F1223043C0341BEC027938454F835573049FE414AB93797DA89E57BF53851B090EAE6B9F4B4B0650971632FD57440224789CCAFA33BA98213F2532812250454EF7E9ED7D2206A86855BFEE7B80F8897B1450DD72DB8BD29BF2164865AC61E91386115CB9F3D57F32A7D3B6FA6447B092421FA444491570EBF1AF48FC86C5C689AA1D458FEE1343F818CA0D0E5B2FFCC50ECDA7155B2AEAE53F9637234A6264F36FFE8EC23B23B1331D886C3DBD00F1B8C7432A4969C05EB16680D5690DB14276FBEBC371291C35C25F5BFFDBD7F751CFE90132C8C647C4355602E29DE6883F7BC542F46C8D435BADC5918B1591C6DD2DD4471CDE24311AEF285A69DF4C7BE1C1BF3DF9E9343908228DD27F3AD4D28421A63AE3E729E84F71A1580A047751BA7A0B6F46FC88E18E019B0EF4A840F09CBA184F49EE2E772E55B69CCAF60483936D9688F35ADF029218151426DD5D057CB517394420A3BD05F915B454B2A6AB7F035455C3F451F78E797DF1997DD58AE48FABEA5E34BBD68D6555F5BE9E373123FB9E1B4DA7255B07BDA4C94E9CF0595F5347CFE41047DD0CD8EF54DD24EB71D64740959880221F382AC2B3B885CBFAC98EA1680A7F24CF24470DCD9FCA30435ADEAEA06E28A00D890BFEE375763EB5DE5A55211C8C1C8B924D587B3A9156C6BE1E710E2EC9F809E8932F8D9D61D8370E5643DA7018C650A9468BFE5DE4F08C7B421E20DF5BD6D08AA458C31CB623CE22F344FCD2E194174E5C9146A317C0F09262A342D1BF34E45E5883DF8A51289A07F34661DD4586725A191D8A61027419D4E141687A49D5612CF766A5FF52FD04D108B33F8F1C7026B846596D1E45CB89FB9922F1E6E70C1ED113C4EB96E3BFC79D19F73B95386CCD2AC2D27A87B05114B0F1028D6B82E6EC142F0CBC389E509ACB23E8CFF164D5644D25648389B253D9D0BBB3365353AEEF2AAA9BAB129723BE2BF585F33040DFEDF86D965728A1AFC4DD854AA8F84D4024E58C86507247B3FBBB41DF4982EDAD60C09F418FC00D4A5CE19129A1345A325E8AEB9E332C65079DD67C6265FE7CE05C53AE6A1D304946162E5CE3FF5492B65D41B757C56DC88BBE86FC8C01D3E07AC6F4354B95D1BD84934DFCC22CB5E8B8A6C12B3D3D1ED367D5600E3D34E51A2DF1D74978E315BE8823669C0A89C2C55C2B604760A25F434510B352E8E9BA95D563714F1D39C600ECFFBD9977AEA621711C11ED3025FC67B49A9F458C0104F537F0D6C660F6CB479798FFD728F59F4A4D30D66CEF2B273B7B00D0680B661A51DADC5596EF2C6C08DC72D592D1682753EE107BBAE66A34B6B57D054850728728124FA4D9AEEBE85EC1B8BAD506CF19389ABF9B453AF9A60B37B2E5A5F337343151FC6C53FDBA24679F82D8B55C3052048B9E31A911FE461DADA3E02F97CDBE3E1C60D7BE4A7B7A99B5FB6594511CAF811B72012CD0F7332700F3A512196B22C2FF4D706DA4E44CE8980C910BAD5709B63FABD93DDE44E3477D96481DDC8A42B783858406AB74CDC95542A93D52DD51B55F2CEFE9A391CE4B8D00EBFA170463EB21222D45E3E6DC5FAA7758E5275C3ED21EA2382B4D7DF0F0D4F73CC014D4D6B9329D2F287581BAB6176B46D7DA9C78E18618A67044280F665668758EB9600E5B98CB453B4CD6293114E7F3707949D418E58A47D9BEA714EE1D1159A12B62597CE4B3D6DB1B7F351C267DA283AD467155593AE78F3CA12F211B57160E0752C1D7C7B1F52578BCE2E92E0F4A39172F9EA958BD733E8301E2FF5E9F475DF5E37DB5CC4256E43EB9F3C3016C30CEFC0BD4414386CE91B58FC798591B96E4E20EA779E9B24F12A4AA228E21537F3978DB9D1F345EB74B194CB28DE26B972E7D7795267E20AEA1D6FC1109E0BD702A067CBF1A2CAC5A14A352B9D135CCA3EB4443BC2900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/COAOQD+SFProRounded-Regular cguidfix
/F1.1/COAOQD+SFProRounded-Regular renmfont
%RBIBeginFontSubset: VUVBUD+Helvetica
%!FontType1-1.0: VUVBUD+Helvetica 1.0000.0.0000
14 dict begin
/FontName /VUVBUD+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /T put
dup 34 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/S 1 def
/T 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4512998 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28024022816FF807CAF9CEF58EA120E680185C875EBD525A3037498B511C49FE7CD2D3023036A80F70B3528B903FDCAD6C2EF0AB2756BC9F72E3B5E23BF734E5C02083FB8547C33AF3485E327379B3F1005D3D581FF1BEAF82990024D2B140CBF2CDC8D52EA0EED38D903E1FCB511CFB5B3D311B0A3E2CEF53B478B69F1992F821A3C58265600ADEF235965BE6114DEDAA00DE49815A9B351899213E5594D479597BB46B9163FC20C29263A5073D721A0BC29D3B3479230A65FF98CCEAB80E76564A3D16827109D4F2F1EFC7D2950C10054A10EEB6B61EE2950142CF1D8877C1623F4DF271BFC91D13DCFAB39E19D1BBDA1265C929F454691A8B4214D7C57B5C273FED552D751047B001FE0AEDE342144E5B582891899A6E584BC5DAEB489327ADB5FEDC14E794240DE735690998833EAA3B27A76EC2BF571175A12CA0AF8710CA7A3FD5B3379FDDA03EE53C16C7ADA23AA640E299AECF514ACB2ACC98B1294D6734F9C2308207346ACF152BE0B100955A45A65B1897910106FCEB0DD2591D664824DCBEAD6025FA10034B02A1F8D9A8F70FCFF874559E2BAA5FAAE15023BFC8C9BE9A5671A9D330E74B681152A3CF357C728CC92C559C6E33DE011C6E8B98132F3FC3B6800C39CB19296E56C8381DEE1F28A6537D5AFE330A8ED313468E1F6BC7DD7B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/VUVBUD+Helvetica cguidfix
/F2.1/VUVBUD+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 850 500 rc
0 0 m
60 0 l
60 500 l
0 500 l
h
f
0 0 m
850 0 l
850 50 l
0 50 l
h
f
0 490 m
850 490 l
850 500 l
0 500 l
h
f
840 0 m
850 0 l
850 500 l
840 500 l
h
f
60 50 m
840 50 l
840 490 l
60 490 l
h
f
2.0299301 w
0 sc
79.024391 50 m
79.024391 58 l
S
/F1.1[ 14 0 0 14 0 0]sf
74.779274 29 m
(!)s
205.85365 50 m
205.85365 58 l
S
197.64711 29 m
("!)[ 7.922852 0.000000 ] xS
332.68292 50 m
332.68292 58 l
S
324.20636 29 m
(#!)[ 8.462891 0.000000 ] xS
459.51221 50 m
459.51221 58 l
S
451.07666 29 m
($!)[ 8.380859 0.000000 ] xS
586.34149 50 m
586.34149 58 l
S
577.90253 29 m
(%!)[ 8.387695 0.000000 ] xS
713.17072 50 m
713.17072 58 l
S
701.57697 29 m
(&!!)[ 6.207031 8.490234 0.000000 ] xS
840 50 m
840 58 l
S
828.68994 29 m
(&"!)[ 6.207031 7.922852 0.000000 ] xS
1 w
110.7317 50 m
110.7317 54 l
S
142.43903 50 m
142.43903 54 l
S
174.14635 50 m
174.14635 54 l
S
237.56097 50 m
237.56097 54 l
S
269.26828 50 m
269.26828 54 l
S
300.97562 50 m
300.97562 54 l
S
364.39026 50 m
364.39026 54 l
S
396.09756 50 m
396.09756 54 l
S
427.80487 50 m
427.80487 54 l
S
491.21951 50 m
491.21951 54 l
S
522.92682 50 m
522.92682 54 l
S
554.63416 50 m
554.63416 54 l
S
618.04877 50 m
618.04877 54 l
S
649.7561 50 m
649.7561 54 l
S
681.46344 50 m
681.46344 54 l
S
744.87805 50 m
744.87805 54 l
S
776.58539 50 m
776.58539 54 l
S
808.29266 50 m
808.29266 54 l
S
/F1.1[ 18 0 0 18 0 0]sf
363.59473 4 m
('\(\)*+,-./*--01,.\)+\(/234)[ 10.784180 9.219727 9.035156 9.017578 5.422852 3.673828 9.553711 9.483398 3.691406 9.017578 9.553711 9.553711 5.106445 9.966797 3.673828 9.483398 9.035156 5.159180 9.219727 3.691406 5.800781 7.866211 0.000000 ] xS
2.0299301 w
60 50 m
68 50 l
S
/F1.1[ 14 0 0 14 0 0]sf
31.710938 44 m
(5&!)[ 5.591797 6.207031 0.000000 ] xS
60 108.66666 m
68 108.66666 l
S
43.509766 102.66666 m
(!)s
60 167.33333 m
68 167.33333 l
S
37.302734 161.33333 m
(&!)[ 6.207031 0.000000 ] xS
60 226 m
68 226 l
S
35.586914 220 m
("!)[ 7.922852 0.000000 ] xS
60 284.66666 m
68 284.66666 l
S
35.224609 278.66666 m
(6!)[ 8.285156 0.000000 ] xS
60 343.33334 m
68 343.33334 l
S
35.046875 337.33334 m
(#!)[ 8.462891 0.000000 ] xS
60 402 m
68 402 l
S
35.320312 396 m
(7!)[ 8.189453 0.000000 ] xS
60 460.66666 m
68 460.66666 l
S
35.128906 454.66666 m
($!)[ 8.380859 0.000000 ] xS
1 w
60 61.733334 m
64 61.733334 l
S
60 73.466667 m
64 73.466667 l
S
60 85.199997 m
64 85.199997 l
S
60 96.933334 m
64 96.933334 l
S
60 120.4 m
64 120.4 l
S
60 132.13333 m
64 132.13333 l
S
60 143.86667 m
64 143.86667 l
S
60 155.60001 m
64 155.60001 l
S
60 179.06667 m
64 179.06667 l
S
60 190.8 m
64 190.8 l
S
60 202.53334 m
64 202.53334 l
S
60 214.26666 m
64 214.26666 l
S
60 237.73334 m
64 237.73334 l
S
60 249.46666 m
64 249.46666 l
S
60 261.20001 m
64 261.20001 l
S
60 272.93332 m
64 272.93332 l
S
60 296.39999 m
64 296.39999 l
S
60 308.13333 m
64 308.13333 l
S
60 319.86667 m
64 319.86667 l
S
60 331.60001 m
64 331.60001 l
S
60 355.06668 m
64 355.06668 l
S
60 366.79999 m
64 366.79999 l
S
60 378.53333 m
64 378.53333 l
S
60 390.26666 m
64 390.26666 l
S
60 413.73334 m
64 413.73334 l
S
60 425.46667 m
64 425.46667 l
S
60 437.20001 m
64 437.20001 l
S
60 448.93332 m
64 448.93332 l
S
60 472.39999 m
64 472.39999 l
S
60 484.13333 m
64 484.13333 l
S
0 1 -1 0 -299.71094 -240.28906 cm
/F1.1[ 18 0 0 18 0 0]sf
444.69629 -324.42188 m
(8.\(09:/2;*\)<=>-<4)[ 9.940430 9.483398 9.219727 5.106445 9.887695 8.745117 3.691406 5.800781 8.296875 9.017578 9.035156 3.673828 5.800781 14.458008 9.553711 3.673828 0.000000 ] xS
0.156524 w
1 J
1 j
[
10
5
5
5
] 0 d
0.60000002 i
0.33333334 sc
CM
79.024391 50 m
79.024391 490 l
S
205.85365 50 m
205.85365 490 l
S
332.68292 50 m
332.68292 490 l
S
459.51221 50 m
459.51221 490 l
S
586.34149 50 m
586.34149 490 l
S
713.17072 50 m
713.17072 490 l
S
840 50 m
840 490 l
S
0.1 w
[
1
5
] 0 d
110.7317 50 m
110.7317 490 l
S
142.43903 50 m
142.43903 490 l
S
174.14635 50 m
174.14635 490 l
S
237.56097 50 m
237.56097 490 l
S
269.26828 50 m
269.26828 490 l
S
300.97562 50 m
300.97562 490 l
S
364.39026 50 m
364.39026 490 l
S
396.09756 50 m
396.09756 490 l
S
427.80487 50 m
427.80487 490 l
S
491.21951 50 m
491.21951 490 l
S
522.92682 50 m
522.92682 490 l
S
554.63416 50 m
554.63416 490 l
S
618.04877 50 m
618.04877 490 l
S
649.7561 50 m
649.7561 490 l
S
681.46344 50 m
681.46344 490 l
S
744.87805 50 m
744.87805 490 l
S
776.58539 50 m
776.58539 490 l
S
808.29266 50 m
808.29266 490 l
S
0.156524 w
[
10
5
5
5
] 0 d
60 50 m
840 50 l
S
60 108.66666 m
840 108.66666 l
S
60 167.33333 m
840 167.33333 l
S
60 226 m
840 226 l
S
60 284.66666 m
840 284.66666 l
S
60 343.33334 m
840 343.33334 l
S
60 402 m
840 402 l
S
60 460.66666 m
840 460.66666 l
S
0.1 w
[
1
5
] 0 d
60 61.733334 m
840 61.733334 l
S
60 73.466667 m
840 73.466667 l
S
60 85.199997 m
840 85.199997 l
S
60 96.933334 m
840 96.933334 l
S
60 120.4 m
840 120.4 l
S
60 132.13333 m
840 132.13333 l
S
60 143.86667 m
840 143.86667 l
S
60 155.60001 m
840 155.60001 l
S
60 179.06667 m
840 179.06667 l
S
60 190.8 m
840 190.8 l
S
60 202.53334 m
840 202.53334 l
S
60 214.26666 m
840 214.26666 l
S
60 237.73334 m
840 237.73334 l
S
60 249.46666 m
840 249.46666 l
S
60 261.20001 m
840 261.20001 l
S
60 272.93332 m
840 272.93332 l
S
60 296.39999 m
840 296.39999 l
S
60 308.13333 m
840 308.13333 l
S
60 319.86667 m
840 319.86667 l
S
60 331.60001 m
840 331.60001 l
S
60 355.06668 m
840 355.06668 l
S
60 366.79999 m
840 366.79999 l
S
60 378.53333 m
840 378.53333 l
S
60 390.26666 m
840 390.26666 l
S
60 413.73334 m
840 413.73334 l
S
60 425.46667 m
840 425.46667 l
S
60 437.20001 m
840 437.20001 l
S
60 448.93332 m
840 448.93332 l
S
60 472.39999 m
840 472.39999 l
S
60 484.13333 m
840 484.13333 l
S
Q
1.5 w
1 J
1 j
0.60000002 i
0 sc
q
60 50 780 440 rc
79.024391 108.66666 m
159.4393 120.10667 l
217.59464 140.40533 l
266.935 154.42667 l
312.65918 167.86133 l
351.92108 199.48267 l
381.4458 240.608 l
406.45087 277.80267 l
433.52359 253.04533 l
464.84485 257.85599 l
482.07059 451.51468 l
487.09329 348.08533 l
492.17856 221.60001 l
516.99579 168.62399 l
554.46692 154.66133 l
593.46179 144.74667 l
642.38239 131.664 l
709.74548 112.36266 l
814.1579 80.975998 l
S
0.66666669 sc
75.524391 105.16666 m
82.524391 105.16666 l
82.524391 112.16666 l
75.524391 112.16666 l
h
75.524391 105.16666 m
f
1.05 w
0 j
0 sc
75.524391 105.16666 m
82.524391 105.16666 l
82.524391 112.16666 l
75.524391 112.16666 l
h
75.524391 105.16666 m
82.524391 105.16666 l
82.524391 112.16666 l
75.524391 112.16666 l
h
75.524391 105.16666 m
S
0.66666669 sc
155.9393 116.60667 m
162.9393 116.60667 l
162.9393 123.60667 l
155.9393 123.60667 l
h
155.9393 116.60667 m
f
0 sc
155.9393 116.60667 m
162.9393 116.60667 l
162.9393 123.60667 l
155.9393 123.60667 l
h
155.9393 116.60667 m
162.9393 116.60667 l
162.9393 123.60667 l
155.9393 123.60667 l
h
155.9393 116.60667 m
S
0.66666669 sc
214.09464 136.90533 m
221.09464 136.90533 l
221.09464 143.90533 l
214.09464 143.90533 l
h
214.09464 136.90533 m
f
0 sc
214.09464 136.90533 m
221.09464 136.90533 l
221.09464 143.90533 l
214.09464 143.90533 l
h
214.09464 136.90533 m
221.09464 136.90533 l
221.09464 143.90533 l
214.09464 143.90533 l
h
214.09464 136.90533 m
S
0.66666669 sc
263.435 150.92667 m
270.435 150.92667 l
270.435 157.92667 l
263.435 157.92667 l
h
263.435 150.92667 m
f
0 sc
263.435 150.92667 m
270.435 150.92667 l
270.435 157.92667 l
263.435 157.92667 l
h
263.435 150.92667 m
270.435 150.92667 l
270.435 157.92667 l
263.435 157.92667 l
h
263.435 150.92667 m
S
0.66666669 sc
309.15918 164.36133 m
316.15918 164.36133 l
316.15918 171.36133 l
309.15918 171.36133 l
h
309.15918 164.36133 m
f
0 sc
309.15918 164.36133 m
316.15918 164.36133 l
316.15918 171.36133 l
309.15918 171.36133 l
h
309.15918 164.36133 m
316.15918 164.36133 l
316.15918 171.36133 l
309.15918 171.36133 l
h
309.15918 164.36133 m
S
0.66666669 sc
348.42108 195.98267 m
355.42108 195.98267 l
355.42108 202.98267 l
348.42108 202.98267 l
h
348.42108 195.98267 m
f
0 sc
348.42108 195.98267 m
355.42108 195.98267 l
355.42108 202.98267 l
348.42108 202.98267 l
h
348.42108 195.98267 m
355.42108 195.98267 l
355.42108 202.98267 l
348.42108 202.98267 l
h
348.42108 195.98267 m
S
0.66666669 sc
377.9458 237.108 m
384.9458 237.108 l
384.9458 244.108 l
377.9458 244.108 l
h
377.9458 237.108 m
f
0 sc
377.9458 237.108 m
384.9458 237.108 l
384.9458 244.108 l
377.9458 244.108 l
h
377.9458 237.108 m
384.9458 237.108 l
384.9458 244.108 l
377.9458 244.108 l
h
377.9458 237.108 m
S
0.66666669 sc
402.95087 274.30267 m
409.95087 274.30267 l
409.95087 281.30267 l
402.95087 281.30267 l
h
402.95087 274.30267 m
f
0 sc
402.95087 274.30267 m
409.95087 274.30267 l
409.95087 281.30267 l
402.95087 281.30267 l
h
402.95087 274.30267 m
409.95087 274.30267 l
409.95087 281.30267 l
402.95087 281.30267 l
h
402.95087 274.30267 m
S
0.66666669 sc
430.02359 249.54533 m
437.02359 249.54533 l
437.02359 256.54532 l
430.02359 256.54532 l
h
430.02359 249.54533 m
f
0 sc
430.02359 249.54533 m
437.02359 249.54533 l
437.02359 256.54532 l
430.02359 256.54532 l
h
430.02359 249.54533 m
437.02359 249.54533 l
437.02359 256.54532 l
430.02359 256.54532 l
h
430.02359 249.54533 m
S
0.66666669 sc
461.34485 254.356 m
468.34485 254.356 l
468.34485 261.35599 l
461.34485 261.35599 l
h
461.34485 254.356 m
f
0 sc
461.34485 254.356 m
468.34485 254.356 l
468.34485 261.35599 l
461.34485 261.35599 l
h
461.34485 254.356 m
468.34485 254.356 l
468.34485 261.35599 l
461.34485 261.35599 l
h
461.34485 254.356 m
S
0.66666669 sc
478.57059 448.01468 m
485.57059 448.01468 l
485.57059 455.01468 l
478.57059 455.01468 l
h
478.57059 448.01468 m
f
0 sc
478.57059 448.01468 m
485.57059 448.01468 l
485.57059 455.01468 l
478.57059 455.01468 l
h
478.57059 448.01468 m
485.57059 448.01468 l
485.57059 455.01468 l
478.57059 455.01468 l
h
478.57059 448.01468 m
S
0.66666669 sc
483.59329 344.58533 m
490.59329 344.58533 l
490.59329 351.58533 l
483.59329 351.58533 l
h
483.59329 344.58533 m
f
0 sc
483.59329 344.58533 m
490.59329 344.58533 l
490.59329 351.58533 l
483.59329 351.58533 l
h
483.59329 344.58533 m
490.59329 344.58533 l
490.59329 351.58533 l
483.59329 351.58533 l
h
483.59329 344.58533 m
S
0.66666669 sc
488.67856 218.10001 m
495.67856 218.10001 l
495.67856 225.10001 l
488.67856 225.10001 l
h
488.67856 218.10001 m
f
0 sc
488.67856 218.10001 m
495.67856 218.10001 l
495.67856 225.10001 l
488.67856 225.10001 l
h
488.67856 218.10001 m
495.67856 218.10001 l
495.67856 225.10001 l
488.67856 225.10001 l
h
488.67856 218.10001 m
S
0.66666669 sc
513.49579 165.12399 m
520.49579 165.12399 l
520.49579 172.12399 l
513.49579 172.12399 l
h
513.49579 165.12399 m
f
0 sc
513.49579 165.12399 m
520.49579 165.12399 l
520.49579 172.12399 l
513.49579 172.12399 l
h
513.49579 165.12399 m
520.49579 165.12399 l
520.49579 172.12399 l
513.49579 172.12399 l
h
513.49579 165.12399 m
S
0.66666669 sc
550.96692 151.16133 m
557.96692 151.16133 l
557.96692 158.16133 l
550.96692 158.16133 l
h
550.96692 151.16133 m
f
0 sc
550.96692 151.16133 m
557.96692 151.16133 l
557.96692 158.16133 l
550.96692 158.16133 l
h
550.96692 151.16133 m
557.96692 151.16133 l
557.96692 158.16133 l
550.96692 158.16133 l
h
550.96692 151.16133 m
S
0.66666669 sc
589.96179 141.24667 m
596.96179 141.24667 l
596.96179 148.24667 l
589.96179 148.24667 l
h
589.96179 141.24667 m
f
0 sc
589.96179 141.24667 m
596.96179 141.24667 l
596.96179 148.24667 l
589.96179 148.24667 l
h
589.96179 141.24667 m
596.96179 141.24667 l
596.96179 148.24667 l
589.96179 148.24667 l
h
589.96179 141.24667 m
S
0.66666669 sc
638.88239 128.164 m
645.88239 128.164 l
645.88239 135.164 l
638.88239 135.164 l
h
638.88239 128.164 m
f
0 sc
638.88239 128.164 m
645.88239 128.164 l
645.88239 135.164 l
638.88239 135.164 l
h
638.88239 128.164 m
645.88239 128.164 l
645.88239 135.164 l
638.88239 135.164 l
h
638.88239 128.164 m
S
0.66666669 sc
706.24548 108.86266 m
713.24548 108.86266 l
713.24548 115.86266 l
706.24548 115.86266 l
h
706.24548 108.86266 m
f
0 sc
706.24548 108.86266 m
713.24548 108.86266 l
713.24548 115.86266 l
706.24548 115.86266 l
h
706.24548 108.86266 m
713.24548 108.86266 l
713.24548 115.86266 l
706.24548 115.86266 l
h
706.24548 108.86266 m
S
0.66666669 sc
810.6579 77.475998 m
817.6579 77.475998 l
817.6579 84.475998 l
810.6579 84.475998 l
h
810.6579 77.475998 m
f
0 sc
810.6579 77.475998 m
817.6579 77.475998 l
817.6579 84.475998 l
810.6579 84.475998 l
h
810.6579 77.475998 m
817.6579 77.475998 l
817.6579 84.475998 l
810.6579 84.475998 l
h
810.6579 77.475998 m
S
Q
1.53409 w
0 J
0 j
0 i
q
0 0 850 500 rc
60 50 m
840 50 l
840 490 l
60 490 l
h
S
Q
/Cs2 SC
0 0 0 sc
q
469.7081 460.49445 25.333984 14 rc
1 0 0 -1 469.7081 474.49445 cm
/F2.1[ 12 0 0 -12 0 0]sf
5 11 m
(!")[ 7.330078 0.000000 ] xS
ep
end
%%Trailer
%%EOF
